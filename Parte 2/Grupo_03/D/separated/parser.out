Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FIM
    STRING

Grammar

Rule 0     S' -> statement
Rule 1     statement -> IDENTIFIER EQUALS expression SEMI
Rule 2     statement -> expression SEMI
Rule 3     expression -> expression PLUS expression
Rule 4     expression -> expression MINUS expression
Rule 5     expression -> expression TIMES expression
Rule 6     expression -> expression DIVIDE expression
Rule 7     expression -> LPAREN expression RPAREN
Rule 8     expression -> NUMBER
Rule 9     expression -> FLOAT
Rule 10    expression -> IDENTIFIER
Rule 11    expression -> LBRACKET list_elements RBRACKET
Rule 12    expression -> LBRACKET RBRACKET
Rule 13    list_elements -> list_elements COMMA expression
Rule 14    list_elements -> expression
Rule 15    empty -> <empty>
Rule 16    statement_list -> statement_list statement
Rule 17    statement_list -> statement
Rule 18    statement -> ESCREVER LPAREN expression RPAREN SEMI
Rule 19    statement -> ESCREVER LPAREN expression COMMA expression RPAREN SEMI
Rule 20    statement -> FUNCAO IDENTIFIER LPAREN params RPAREN COLON expression SEMI
Rule 21    params -> params COMMA IDENTIFIER
Rule 22    params -> IDENTIFIER
Rule 23    params -> empty
Rule 24    expression -> IDENTIFIER LPAREN arguments RPAREN
Rule 25    arguments -> arguments COMMA expression
Rule 26    arguments -> expression
Rule 27    arguments -> empty
Rule 28    expression -> MAP LPAREN IDENTIFIER COMMA expression RPAREN
Rule 29    expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

Terminals, with rules where they appear

COLON                : 20
COMMA                : 13 19 21 25 28 29 29
DIVIDE               : 6
EQUALS               : 1
ESCREVER             : 18 19
FIM                  : 
FLOAT                : 9
FOLD                 : 29
FUNCAO               : 20
IDENTIFIER           : 1 10 20 21 22 24 28 29
LBRACKET             : 11 12
LPAREN               : 7 18 19 20 24 28 29
MAP                  : 28
MINUS                : 4
NUMBER               : 8
PLUS                 : 3
RBRACKET             : 11 12
RPAREN               : 7 18 19 20 24 28 29
SEMI                 : 1 2 18 19 20
STRING               : 
TIMES                : 5
error                : 

Nonterminals, with rules where they appear

arguments            : 24 25
empty                : 23 27
expression           : 1 2 3 3 4 4 5 5 6 6 7 13 14 18 19 19 20 25 26 28 29 29
list_elements        : 11 13
params               : 20 21
statement            : 16 17 0
statement_list       : 16

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . IDENTIFIER EQUALS expression SEMI
    (2) statement -> . expression SEMI
    (18) statement -> . ESCREVER LPAREN expression RPAREN SEMI
    (19) statement -> . ESCREVER LPAREN expression COMMA expression RPAREN SEMI
    (20) statement -> . FUNCAO IDENTIFIER LPAREN params RPAREN COLON expression SEMI
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    IDENTIFIER      shift and go to state 2
    ESCREVER        shift and go to state 4
    FUNCAO          shift and go to state 6
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    statement                      shift and go to state 1
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> IDENTIFIER . EQUALS expression SEMI
    (10) expression -> IDENTIFIER .
    (24) expression -> IDENTIFIER . LPAREN arguments RPAREN

    EQUALS          shift and go to state 12
    SEMI            reduce using rule 10 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 10 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 10 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 10 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 10 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 13


state 3

    (2) statement -> expression . SEMI
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 14
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 4

    (18) statement -> ESCREVER . LPAREN expression RPAREN SEMI
    (19) statement -> ESCREVER . LPAREN expression COMMA expression RPAREN SEMI

    LPAREN          shift and go to state 19


state 5

    (7) expression -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 20

state 6

    (20) statement -> FUNCAO . IDENTIFIER LPAREN params RPAREN COLON expression SEMI

    IDENTIFIER      shift and go to state 22


state 7

    (8) expression -> NUMBER .

    SEMI            reduce using rule 8 (expression -> NUMBER .)
    PLUS            reduce using rule 8 (expression -> NUMBER .)
    MINUS           reduce using rule 8 (expression -> NUMBER .)
    TIMES           reduce using rule 8 (expression -> NUMBER .)
    DIVIDE          reduce using rule 8 (expression -> NUMBER .)
    RPAREN          reduce using rule 8 (expression -> NUMBER .)
    RBRACKET        reduce using rule 8 (expression -> NUMBER .)
    COMMA           reduce using rule 8 (expression -> NUMBER .)


state 8

    (9) expression -> FLOAT .

    SEMI            reduce using rule 9 (expression -> FLOAT .)
    PLUS            reduce using rule 9 (expression -> FLOAT .)
    MINUS           reduce using rule 9 (expression -> FLOAT .)
    TIMES           reduce using rule 9 (expression -> FLOAT .)
    DIVIDE          reduce using rule 9 (expression -> FLOAT .)
    RPAREN          reduce using rule 9 (expression -> FLOAT .)
    RBRACKET        reduce using rule 9 (expression -> FLOAT .)
    COMMA           reduce using rule 9 (expression -> FLOAT .)


state 9

    (11) expression -> LBRACKET . list_elements RBRACKET
    (12) expression -> LBRACKET . RBRACKET
    (13) list_elements -> . list_elements COMMA expression
    (14) list_elements -> . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    RBRACKET        shift and go to state 24
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    list_elements                  shift and go to state 23
    expression                     shift and go to state 25

state 10

    (28) expression -> MAP . LPAREN IDENTIFIER COMMA expression RPAREN

    LPAREN          shift and go to state 26


state 11

    (29) expression -> FOLD . LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 27


state 12

    (1) statement -> IDENTIFIER EQUALS . expression SEMI
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 28

state 13

    (24) expression -> IDENTIFIER LPAREN . arguments RPAREN
    (25) arguments -> . arguments COMMA expression
    (26) arguments -> . expression
    (27) arguments -> . empty
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN
    (15) empty -> .

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11
    RPAREN          reduce using rule 15 (empty -> .)
    COMMA           reduce using rule 15 (empty -> .)

    arguments                      shift and go to state 29
    expression                     shift and go to state 30
    empty                          shift and go to state 31

state 14

    (2) statement -> expression SEMI .

    $end            reduce using rule 2 (statement -> expression SEMI .)


state 15

    (3) expression -> expression PLUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 32

state 16

    (4) expression -> expression MINUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 33

state 17

    (5) expression -> expression TIMES . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 34

state 18

    (6) expression -> expression DIVIDE . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 35

state 19

    (18) statement -> ESCREVER LPAREN . expression RPAREN SEMI
    (19) statement -> ESCREVER LPAREN . expression COMMA expression RPAREN SEMI
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 36

state 20

    (7) expression -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 37
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 21

    (10) expression -> IDENTIFIER .
    (24) expression -> IDENTIFIER . LPAREN arguments RPAREN

    RPAREN          reduce using rule 10 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 10 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 10 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 10 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 10 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 10 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 10 (expression -> IDENTIFIER .)
    SEMI            reduce using rule 10 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 13


state 22

    (20) statement -> FUNCAO IDENTIFIER . LPAREN params RPAREN COLON expression SEMI

    LPAREN          shift and go to state 38


state 23

    (11) expression -> LBRACKET list_elements . RBRACKET
    (13) list_elements -> list_elements . COMMA expression

    RBRACKET        shift and go to state 39
    COMMA           shift and go to state 40


state 24

    (12) expression -> LBRACKET RBRACKET .

    SEMI            reduce using rule 12 (expression -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 12 (expression -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 12 (expression -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 12 (expression -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 12 (expression -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 12 (expression -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 12 (expression -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 12 (expression -> LBRACKET RBRACKET .)


state 25

    (14) list_elements -> expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RBRACKET        reduce using rule 14 (list_elements -> expression .)
    COMMA           reduce using rule 14 (list_elements -> expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 26

    (28) expression -> MAP LPAREN . IDENTIFIER COMMA expression RPAREN

    IDENTIFIER      shift and go to state 41


state 27

    (29) expression -> FOLD LPAREN . IDENTIFIER COMMA expression COMMA expression RPAREN

    IDENTIFIER      shift and go to state 42


state 28

    (1) statement -> IDENTIFIER EQUALS expression . SEMI
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 43
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 29

    (24) expression -> IDENTIFIER LPAREN arguments . RPAREN
    (25) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 44
    COMMA           shift and go to state 45


state 30

    (26) arguments -> expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 26 (arguments -> expression .)
    COMMA           reduce using rule 26 (arguments -> expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 31

    (27) arguments -> empty .

    RPAREN          reduce using rule 27 (arguments -> empty .)
    COMMA           reduce using rule 27 (arguments -> empty .)


state 32

    (3) expression -> expression PLUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMI            reduce using rule 3 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 3 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 3 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 3 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18

  ! PLUS            [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression PLUS expression .) ]


state 33

    (4) expression -> expression MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMI            reduce using rule 4 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 4 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 4 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18

  ! PLUS            [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression MINUS expression .) ]


state 34

    (5) expression -> expression TIMES expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMI            reduce using rule 5 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 5 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 5 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 5 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18

  ! PLUS            [ reduce using rule 5 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 5 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 5 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression TIMES expression .) ]


state 35

    (6) expression -> expression DIVIDE expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMI            reduce using rule 6 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 6 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 6 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 6 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18

  ! PLUS            [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]


state 36

    (18) statement -> ESCREVER LPAREN expression . RPAREN SEMI
    (19) statement -> ESCREVER LPAREN expression . COMMA expression RPAREN SEMI
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 46
    COMMA           shift and go to state 47
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 37

    (7) expression -> LPAREN expression RPAREN .

    SEMI            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 7 (expression -> LPAREN expression RPAREN .)


state 38

    (20) statement -> FUNCAO IDENTIFIER LPAREN . params RPAREN COLON expression SEMI
    (21) params -> . params COMMA IDENTIFIER
    (22) params -> . IDENTIFIER
    (23) params -> . empty
    (15) empty -> .

    IDENTIFIER      shift and go to state 48
    RPAREN          reduce using rule 15 (empty -> .)
    COMMA           reduce using rule 15 (empty -> .)

    params                         shift and go to state 49
    empty                          shift and go to state 50

state 39

    (11) expression -> LBRACKET list_elements RBRACKET .

    SEMI            reduce using rule 11 (expression -> LBRACKET list_elements RBRACKET .)
    PLUS            reduce using rule 11 (expression -> LBRACKET list_elements RBRACKET .)
    MINUS           reduce using rule 11 (expression -> LBRACKET list_elements RBRACKET .)
    TIMES           reduce using rule 11 (expression -> LBRACKET list_elements RBRACKET .)
    DIVIDE          reduce using rule 11 (expression -> LBRACKET list_elements RBRACKET .)
    RPAREN          reduce using rule 11 (expression -> LBRACKET list_elements RBRACKET .)
    RBRACKET        reduce using rule 11 (expression -> LBRACKET list_elements RBRACKET .)
    COMMA           reduce using rule 11 (expression -> LBRACKET list_elements RBRACKET .)


state 40

    (13) list_elements -> list_elements COMMA . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 51

state 41

    (28) expression -> MAP LPAREN IDENTIFIER . COMMA expression RPAREN

    COMMA           shift and go to state 52


state 42

    (29) expression -> FOLD LPAREN IDENTIFIER . COMMA expression COMMA expression RPAREN

    COMMA           shift and go to state 53


state 43

    (1) statement -> IDENTIFIER EQUALS expression SEMI .

    $end            reduce using rule 1 (statement -> IDENTIFIER EQUALS expression SEMI .)


state 44

    (24) expression -> IDENTIFIER LPAREN arguments RPAREN .

    SEMI            reduce using rule 24 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    PLUS            reduce using rule 24 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    MINUS           reduce using rule 24 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    TIMES           reduce using rule 24 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 24 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 24 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    RBRACKET        reduce using rule 24 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    COMMA           reduce using rule 24 (expression -> IDENTIFIER LPAREN arguments RPAREN .)


state 45

    (25) arguments -> arguments COMMA . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 54

state 46

    (18) statement -> ESCREVER LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 55


state 47

    (19) statement -> ESCREVER LPAREN expression COMMA . expression RPAREN SEMI
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 56

state 48

    (22) params -> IDENTIFIER .

    RPAREN          reduce using rule 22 (params -> IDENTIFIER .)
    COMMA           reduce using rule 22 (params -> IDENTIFIER .)


state 49

    (20) statement -> FUNCAO IDENTIFIER LPAREN params . RPAREN COLON expression SEMI
    (21) params -> params . COMMA IDENTIFIER

    RPAREN          shift and go to state 57
    COMMA           shift and go to state 58


state 50

    (23) params -> empty .

    RPAREN          reduce using rule 23 (params -> empty .)
    COMMA           reduce using rule 23 (params -> empty .)


state 51

    (13) list_elements -> list_elements COMMA expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RBRACKET        reduce using rule 13 (list_elements -> list_elements COMMA expression .)
    COMMA           reduce using rule 13 (list_elements -> list_elements COMMA expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 52

    (28) expression -> MAP LPAREN IDENTIFIER COMMA . expression RPAREN
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 59

state 53

    (29) expression -> FOLD LPAREN IDENTIFIER COMMA . expression COMMA expression RPAREN
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 60

state 54

    (25) arguments -> arguments COMMA expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 25 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 25 (arguments -> arguments COMMA expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 55

    (18) statement -> ESCREVER LPAREN expression RPAREN SEMI .

    $end            reduce using rule 18 (statement -> ESCREVER LPAREN expression RPAREN SEMI .)


state 56

    (19) statement -> ESCREVER LPAREN expression COMMA expression . RPAREN SEMI
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 61
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 57

    (20) statement -> FUNCAO IDENTIFIER LPAREN params RPAREN . COLON expression SEMI

    COLON           shift and go to state 62


state 58

    (21) params -> params COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 63


state 59

    (28) expression -> MAP LPAREN IDENTIFIER COMMA expression . RPAREN
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 64
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 60

    (29) expression -> FOLD LPAREN IDENTIFIER COMMA expression . COMMA expression RPAREN
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    COMMA           shift and go to state 65
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 61

    (19) statement -> ESCREVER LPAREN expression COMMA expression RPAREN . SEMI

    SEMI            shift and go to state 66


state 62

    (20) statement -> FUNCAO IDENTIFIER LPAREN params RPAREN COLON . expression SEMI
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 67

state 63

    (21) params -> params COMMA IDENTIFIER .

    RPAREN          reduce using rule 21 (params -> params COMMA IDENTIFIER .)
    COMMA           reduce using rule 21 (params -> params COMMA IDENTIFIER .)


state 64

    (28) expression -> MAP LPAREN IDENTIFIER COMMA expression RPAREN .

    SEMI            reduce using rule 28 (expression -> MAP LPAREN IDENTIFIER COMMA expression RPAREN .)
    PLUS            reduce using rule 28 (expression -> MAP LPAREN IDENTIFIER COMMA expression RPAREN .)
    MINUS           reduce using rule 28 (expression -> MAP LPAREN IDENTIFIER COMMA expression RPAREN .)
    TIMES           reduce using rule 28 (expression -> MAP LPAREN IDENTIFIER COMMA expression RPAREN .)
    DIVIDE          reduce using rule 28 (expression -> MAP LPAREN IDENTIFIER COMMA expression RPAREN .)
    RPAREN          reduce using rule 28 (expression -> MAP LPAREN IDENTIFIER COMMA expression RPAREN .)
    RBRACKET        reduce using rule 28 (expression -> MAP LPAREN IDENTIFIER COMMA expression RPAREN .)
    COMMA           reduce using rule 28 (expression -> MAP LPAREN IDENTIFIER COMMA expression RPAREN .)


state 65

    (29) expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA . expression RPAREN
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER
    (9) expression -> . FLOAT
    (10) expression -> . IDENTIFIER
    (11) expression -> . LBRACKET list_elements RBRACKET
    (12) expression -> . LBRACKET RBRACKET
    (24) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (28) expression -> . MAP LPAREN IDENTIFIER COMMA expression RPAREN
    (29) expression -> . FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 21
    LBRACKET        shift and go to state 9
    MAP             shift and go to state 10
    FOLD            shift and go to state 11

    expression                     shift and go to state 68

state 66

    (19) statement -> ESCREVER LPAREN expression COMMA expression RPAREN SEMI .

    $end            reduce using rule 19 (statement -> ESCREVER LPAREN expression COMMA expression RPAREN SEMI .)


state 67

    (20) statement -> FUNCAO IDENTIFIER LPAREN params RPAREN COLON expression . SEMI
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 69
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 68

    (29) expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression . RPAREN
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 70
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 69

    (20) statement -> FUNCAO IDENTIFIER LPAREN params RPAREN COLON expression SEMI .

    $end            reduce using rule 20 (statement -> FUNCAO IDENTIFIER LPAREN params RPAREN COLON expression SEMI .)


state 70

    (29) expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN .

    SEMI            reduce using rule 29 (expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN .)
    PLUS            reduce using rule 29 (expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN .)
    MINUS           reduce using rule 29 (expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN .)
    TIMES           reduce using rule 29 (expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN .)
    DIVIDE          reduce using rule 29 (expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN .)
    RPAREN          reduce using rule 29 (expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN .)
    RBRACKET        reduce using rule 29 (expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN .)
    COMMA           reduce using rule 29 (expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 32 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 32 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 33 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 33 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 33 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 33 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 34 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 34 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 34 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 34 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 35 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 35 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 35 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 35 resolved as shift
