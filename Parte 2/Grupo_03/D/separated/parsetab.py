
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA DIVIDE EQUALS ESCREVER FIM FLOAT FOLD FUNCAO IDENTIFIER LBRACKET LPAREN MAP MINUS NUMBER PLUS RBRACKET RPAREN SEMI STRING TIMESstatement : IDENTIFIER EQUALS expression SEMIstatement : expression SEMIexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBER\n                  | FLOATexpression : IDENTIFIERexpression : LBRACKET list_elements RBRACKET\n                  | LBRACKET RBRACKETlist_elements : list_elements COMMA expression\n                     | expressionempty :statement_list : statement_list statement\n                      | statementstatement : ESCREVER LPAREN expression RPAREN SEMI\n                 | ESCREVER LPAREN expression COMMA expression RPAREN SEMIstatement : FUNCAO IDENTIFIER LPAREN params RPAREN COLON expression SEMIparams : params COMMA IDENTIFIER\n              | IDENTIFIER\n              | emptyexpression : IDENTIFIER LPAREN arguments RPARENarguments : arguments COMMA expression\n                 | expression\n                 | emptyexpression : MAP LPAREN IDENTIFIER COMMA expression RPARENexpression : FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN'
    
_lr_action_items = {'IDENTIFIER':([0,5,6,9,12,13,15,16,17,18,19,26,27,38,40,45,47,52,53,58,62,65,],[2,21,22,21,21,21,21,21,21,21,21,41,42,48,21,21,21,21,21,63,21,21,]),'ESCREVER':([0,],[4,]),'FUNCAO':([0,],[6,]),'LPAREN':([0,2,4,5,9,10,11,12,13,15,16,17,18,19,21,22,40,45,47,52,53,62,65,],[5,13,19,5,5,26,27,5,5,5,5,5,5,5,13,38,5,5,5,5,5,5,5,]),'NUMBER':([0,5,9,12,13,15,16,17,18,19,40,45,47,52,53,62,65,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'FLOAT':([0,5,9,12,13,15,16,17,18,19,40,45,47,52,53,62,65,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'LBRACKET':([0,5,9,12,13,15,16,17,18,19,40,45,47,52,53,62,65,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'MAP':([0,5,9,12,13,15,16,17,18,19,40,45,47,52,53,62,65,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'FOLD':([0,5,9,12,13,15,16,17,18,19,40,45,47,52,53,62,65,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'$end':([1,14,43,55,66,69,],[0,-2,-1,-18,-19,-20,]),'EQUALS':([2,],[12,]),'SEMI':([2,3,7,8,21,24,28,32,33,34,35,37,39,44,46,61,64,67,70,],[-10,14,-8,-9,-10,-12,43,-3,-4,-5,-6,-7,-11,-24,55,66,-28,69,-29,]),'PLUS':([2,3,7,8,20,21,24,25,28,30,32,33,34,35,36,37,39,44,51,54,56,59,60,64,67,68,70,],[-10,15,-8,-9,15,-10,-12,15,15,15,15,15,15,15,15,-7,-11,-24,15,15,15,15,15,-28,15,15,-29,]),'MINUS':([2,3,7,8,20,21,24,25,28,30,32,33,34,35,36,37,39,44,51,54,56,59,60,64,67,68,70,],[-10,16,-8,-9,16,-10,-12,16,16,16,16,16,16,16,16,-7,-11,-24,16,16,16,16,16,-28,16,16,-29,]),'TIMES':([2,3,7,8,20,21,24,25,28,30,32,33,34,35,36,37,39,44,51,54,56,59,60,64,67,68,70,],[-10,17,-8,-9,17,-10,-12,17,17,17,17,17,17,17,17,-7,-11,-24,17,17,17,17,17,-28,17,17,-29,]),'DIVIDE':([2,3,7,8,20,21,24,25,28,30,32,33,34,35,36,37,39,44,51,54,56,59,60,64,67,68,70,],[-10,18,-8,-9,18,-10,-12,18,18,18,18,18,18,18,18,-7,-11,-24,18,18,18,18,18,-28,18,18,-29,]),'RPAREN':([7,8,13,20,21,24,29,30,31,32,33,34,35,36,37,38,39,44,48,49,50,54,56,59,63,64,68,70,],[-8,-9,-15,37,-10,-12,44,-26,-27,-3,-4,-5,-6,46,-7,-15,-11,-24,-22,57,-23,-25,61,64,-21,-28,70,-29,]),'RBRACKET':([7,8,9,21,23,24,25,32,33,34,35,37,39,44,51,64,70,],[-8,-9,24,-10,39,-12,-14,-3,-4,-5,-6,-7,-11,-24,-13,-28,-29,]),'COMMA':([7,8,13,21,23,24,25,29,30,31,32,33,34,35,36,37,38,39,41,42,44,48,49,50,51,54,60,63,64,70,],[-8,-9,-15,-10,40,-12,-14,45,-26,-27,-3,-4,-5,-6,47,-7,-15,-11,52,53,-24,-22,58,-23,-13,-25,65,-21,-28,-29,]),'COLON':([57,],[62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,5,9,12,13,15,16,17,18,19,40,45,47,52,53,62,65,],[3,20,25,28,30,32,33,34,35,36,51,54,56,59,60,67,68,]),'list_elements':([9,],[23,]),'arguments':([13,],[29,]),'empty':([13,38,],[31,50,]),'params':([38,],[49,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> IDENTIFIER EQUALS expression SEMI','statement',4,'p_statement_assign','arith_grammar04.py',9),
  ('statement -> expression SEMI','statement',2,'p_statement_expr','arith_grammar04.py',13),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','arith_grammar04.py',17),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','arith_grammar04.py',18),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','arith_grammar04.py',19),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','arith_grammar04.py',20),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','arith_grammar04.py',29),
  ('expression -> NUMBER','expression',1,'p_expression_number','arith_grammar04.py',33),
  ('expression -> FLOAT','expression',1,'p_expression_number','arith_grammar04.py',34),
  ('expression -> IDENTIFIER','expression',1,'p_expression_name','arith_grammar04.py',38),
  ('expression -> LBRACKET list_elements RBRACKET','expression',3,'p_expression_list','arith_grammar04.py',46),
  ('expression -> LBRACKET RBRACKET','expression',2,'p_expression_list','arith_grammar04.py',47),
  ('list_elements -> list_elements COMMA expression','list_elements',3,'p_list_elements','arith_grammar04.py',54),
  ('list_elements -> expression','list_elements',1,'p_list_elements','arith_grammar04.py',55),
  ('empty -> <empty>','empty',0,'p_empty','arith_grammar04.py',62),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','arith_grammar04.py',66),
  ('statement_list -> statement','statement_list',1,'p_statement_list','arith_grammar04.py',67),
  ('statement -> ESCREVER LPAREN expression RPAREN SEMI','statement',5,'p_statement_write','arith_grammar04.py',74),
  ('statement -> ESCREVER LPAREN expression COMMA expression RPAREN SEMI','statement',7,'p_statement_write','arith_grammar04.py',75),
  ('statement -> FUNCAO IDENTIFIER LPAREN params RPAREN COLON expression SEMI','statement',8,'p_statement_func','arith_grammar04.py',82),
  ('params -> params COMMA IDENTIFIER','params',3,'p_params','arith_grammar04.py',86),
  ('params -> IDENTIFIER','params',1,'p_params','arith_grammar04.py',87),
  ('params -> empty','params',1,'p_params','arith_grammar04.py',88),
  ('expression -> IDENTIFIER LPAREN arguments RPAREN','expression',4,'p_expression_funcall','arith_grammar04.py',97),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','arith_grammar04.py',109),
  ('arguments -> expression','arguments',1,'p_arguments','arith_grammar04.py',110),
  ('arguments -> empty','arguments',1,'p_arguments','arith_grammar04.py',111),
  ('expression -> MAP LPAREN IDENTIFIER COMMA expression RPAREN','expression',6,'p_expression_map','arith_grammar04.py',120),
  ('expression -> FOLD LPAREN IDENTIFIER COMMA expression COMMA expression RPAREN','expression',8,'p_expression_fold','arith_grammar04.py',130),
]
